class CourseDetailsScreen extends StatefulWidget {
  final Course course;
  final UserModel user;

  CourseDetailsScreen({super.key, required this.course, required this.user});

  @override
  _CourseDetailsScreenState createState() => _CourseDetailsScreenState();
}

class _CourseDetailsScreenState extends State<CourseDetailsScreen> {
  final Razorpay _razorpay = Razorpay();
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();
  bool _hasVideoModules = false;

  @override
  void initState() {
    super.initState();
    _razorpay.on(Razorpay.EVENT_PAYMENT_ERROR, (response) {
      _handlePaymentErrorResponse(response, _scaffoldKey.currentContext!);
    });
    _razorpay.on(Razorpay.EVENT_PAYMENT_SUCCESS, (response) {
      _handlePaymentSuccessResponse(response, _scaffoldKey.currentContext!);
    });
    _razorpay.on(Razorpay.EVENT_EXTERNAL_WALLET, (response) {
      _handleExternalWalletSelected(response, _scaffoldKey.currentContext!);
    });
    _checkForVideoModules();
  }

  Future<void> _checkForVideoModules() async {
    VideoController videoController = VideoController();
    for (String module in widget.course.modules) {
      String? videoUrl = await videoController.getVideoUrlFromFirestore(module);
      if (videoUrl != null) {
        setState(() {
          _hasVideoModules = true;
        });
        break;
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      appBar: AppBar(
        title: Text(widget.course.name),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            Container(
              padding: const EdgeInsets.all(8.0),
              decoration: BoxDecoration(
                border: Border.all(color: Colors.blue, width: 2.0),
                borderRadius: BorderRadius.circular(8.0),
              ),
              child: Text(
                'Payment Type: ${widget.course.payment}',
                style: const TextStyle(fontWeight: FontWeight.w500, fontSize: 16),
              ),
            ),
            const SizedBox(height: 15),
            if (widget.course.payment != 'free')
              Container(
                padding: const EdgeInsets.all(8.0),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(8.0),
                  color: const Color.fromARGB(255, 87, 96, 177),
                ),
                child: Text(
                  'â‚¹${widget.course.amount}',
                  style: const TextStyle(
                      fontWeight: FontWeight.w500,
                      fontSize: 16,
                      color: Colors.white),
                ),
              ),
            const SizedBox(height: 20),
            const Text('Modules:',
                style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18)),
            const SizedBox(height: 12),
            ...widget.course.modules.asMap().entries.map((entry) {
              return Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  ExpansionTile(
                    title: Text(
                      '${entry.key + 1}. ${entry.value}',
                      style: const TextStyle(
                          fontSize: 18, fontWeight: FontWeight.w400),
                    ),
                    children: [
                      Align(
                        alignment: Alignment.centerLeft,
                        child: Padding(
                          padding: const EdgeInsets.only(left: 16.0),
                          child: Text(
                            widget.course.descriptions[entry.key],
                            style: const TextStyle(
                                fontSize: 16, color: Colors.black54),
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 10),
                ],
              );
            }),
            const SizedBox(height: 10),
            Center(
              child: ElevatedButton(
                onPressed: _hasVideoModules
                    ? () {
                        if (widget.course.payment == 'free') {
                          Get.find<MentorController>()
                              .mentorProvider
                              .enrollCourse(widget.course, widget.user);
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                                builder: (context) =>
                                    FreeModulesPage(course: widget.course)),
                          );
                        } else if (widget.course.payment == 'paid') {
                          var amount = (double.parse(widget.course.amount) * 100).toInt();
                          var options = {
                            'key': 'rzp_test_5CvknA4rDqeKqA',
                            'amount': amount,
                            'name': 'Phloem',
                            'description': 'Course Payment',
                            "timeout": "180",
                            "currency": "INR",
                            'retry': {'enabled': true, 'max_count': 1},
                            'send_sms_hash': true,
                            'prefill': {
                              'contact': '9584847474',
                              'email': 'test@razorpay.com'
                            },
                          };
                          _razorpay.open(options);
                        }
                      }
                    : null,
                child: Text(_hasVideoModules
                    ? (widget.course.payment == 'free'
                        ? 'Enroll for Free'
                        : 'Enroll Now')
                    : 'Currently Unavailable'),
              ),
            ),
          ],
        ),
      ),
    );
   }

   void _handlePaymentErrorResponse(
      PaymentFailureResponse response, BuildContext context) {
    showAlertDialog(
      context,
      "Payment Failed",
      "Code: ${response.code}\nDescription: ${response.message}",
    );
   }

   void _handlePaymentSuccessResponse(
      PaymentSuccessResponse response, BuildContext context) {
    showAlertDialog(
      context,
      "Payment Successful",
      "Payment ID: ${response.paymentId}",
    ).then((_) {
      Get.find<MentorController>()
          .mentorProvider
          .enrollCourse(widget.course, widget.user);
      Navigator.push(
        context,
        MaterialPageRoute(
            builder: (context) => FreeModulesPage(course: widget.course)),
      );
    });
   }

   void _handleExternalWalletSelected(
      ExternalWalletResponse response, BuildContext context) {
    showAlertDialog(
      context,
      "External Wallet Selected",
      "${response.walletName}",
    );
   }

   Future<void> showAlertDialog(
      BuildContext context, String title, String message) {
    Widget continueButton = ElevatedButton(
      child: const Text("Continue"),
      onPressed: () {
        Navigator.pop(context);
      },
    );

    AlertDialog alert = AlertDialog(
      title: Text(title),
      content: Text(message),
      actions: [continueButton],
    );

    return showDialog(
      context: context,
      builder: (BuildContext context) {
        return alert;
    },
  );
 }
}













import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';
import 'package:get/get.dart';
import 'package:mabook/src/controller/appointmentcon.dart';
import 'package:mabook/src/view/appointments/make%20appointment/make_appointment.dart';
import 'package:mabook/src/view/const/colors.dart';
import 'package:mabook/src/view/home/doctors/doctorInformation/doctor_information_widget.dart';

class DoctorInformation extends StatefulWidget {
  final Map<String, dynamic> doctorData;
  final String doctorid;

  const DoctorInformation(
      {super.key, required this.doctorData, required this.doctorid});

  @override
  _DoctorInformationState createState() => _DoctorInformationState();
}

class _DoctorInformationState extends State<DoctorInformation> {
  DateTime? selectedDate;
  String? selectedDay;
  String? selectedtoken;
  Map<String, int> selectedTokenMap = {};
  final AppoinmentController ctrl = Get.put(AppoinmentController());

  @override
  void initState() {
    super.initState();
  }

  void _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime.now(),
      lastDate: DateTime(2101),
    );
    if (picked != null && picked != selectedDate) {
      setState(() {
        selectedDate = picked;
        selectedDay = DateFormat('EEEE').format(picked);
        print('Selected Date: $selectedDate');
        print('Selected Day: $selectedDay');
      });
    }
  }

  List<int> getAvailableTokens(int count) {
    return List.generate(count, (index) => index + 1);
  }

  @override
  Widget build(BuildContext context) {
    final profilePath = widget.doctorData['profile'] ?? '';
    final Map consultingTimes = widget.doctorData['consulting_times'] ?? {};

    return Scaffold(
      appBar: AppBar(
        centerTitle: true,
        title: Text(
          'Profile',
          style: GoogleFonts.poppins(color: black),
        ),
        leading: IconButton(
            onPressed: () {
              Navigator.pop(context);
            },
            icon: const Icon(Icons.navigate_before, color: black)),
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 30),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const SizedBox(height: 18),
              profileSection(profilePath, widget.doctorData),
              const SizedBox(height: 46),
              detailsDisplay(widget.doctorData),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: () => _selectDate(context),
                child: Text(
                  selectedDate == null
                      ? 'Select a Date'
                      : 'Selected Date: ${DateFormat('yyyy-MM-dd').format(selectedDate!)}',
                  style: GoogleFonts.poppins(color: black),
                ),
              ),
              if (selectedDate != null && selectedDay != null) ...[
                const SizedBox(height: 20),
                Text(
                  'Consulting Times for $selectedDay',
                  style: GoogleFonts.poppins(
                      fontSize: 17, fontWeight: FontWeight.w500, color: black),
                ),
                const SizedBox(height: 10),
                if (consultingTimes.containsKey(selectedDay)) ...[
                  Text(
                    'Start Time: ${consultingTimes[selectedDay]['start_time']}',
                    style: GoogleFonts.poppins(fontSize: 15, color: grey),
                  ),
                  Text(
                    'End Time: ${consultingTimes[selectedDay]['end_time']}',
                    style: GoogleFonts.poppins(fontSize: 15, color: grey),
                  ),
                  Text(
                    'Patient Count: ${consultingTimes[selectedDay]['patient_count']}',
                    style: GoogleFonts.poppins(fontSize: 15, color: grey),
                  ),
                  const SizedBox(height: 20),
                  Text(
                    'Select Token Number',
                    style: GoogleFonts.poppins(
                        fontSize: 17,
                        fontWeight: FontWeight.w500,
                        color: black),
                  ),
                  const SizedBox(height: 10),
                  Wrap(
                    spacing: 5,
                    children: getAvailableTokens(
                            consultingTimes[selectedDay]['patient_count'])
                        .map((token) {
                      bool isSelected =
                          selectedTokenMap[selectedtoken.toString()] == token;
                      return ChoiceChip(
                        label: Text(token.toString()),
                        selected: isSelected,
                        onSelected: (selected) {
                          setState(() {
                            if (selected) {
                              selectedTokenMap[selectedtoken.toString()] =
                                  token;
                            } else {
                              selectedTokenMap.remove(selectedtoken.toString());
                            }
                          });
                        },
                        selectedColor: Colors.green,
                        backgroundColor:
                            isSelected ? Colors.green : Colors.grey[200],
                        labelStyle: isSelected
                            ? const TextStyle(color: Colors.white)
                            : const TextStyle(color: Colors.black),
                      );
                    }).toList(),
                  ),
                ] else ...[
                  Text(
                    'No consulting times available for $selectedDay',
                    style: GoogleFonts.poppins(fontSize: 15, color: grey),
                  ),
                ],
              ],
              const SizedBox(height: 20),
              Center(
                child: SizedBox(
                  width: 365,
                  height: 55,
                  child: ElevatedButton(
                    onPressed: selectedDate != null &&
                            selectedDay != null &&
                            selectedTokenMap[selectedtoken.toString()] != null
                        ? () async {
                            int selectedToken =
                                selectedTokenMap[selectedtoken.toString()]!;
                            await ctrl.fetchAppointmentDetails(
                                selectedDate, widget.doctorid);

                            if (selectedToken == ctrl.bookedTokenNumbers) {
                              Get.snackbar(
                                  'Error', 'This token is already booked.');
                            } else {
                              String date = DateFormat('dd-MMM-yyyy')
                                  .format(selectedDate!);
                              Get.to(() => AppointmentScreen(
                                    doctorid: widget.doctorid.toString(),
                                    doctorData: widget.doctorData,
                                    selectedDate: date,
                                    selectedTokens: selectedToken,
                                  ));
                            }
                          }
                        : null,
                    style: ElevatedButton.styleFrom(
                      shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(19)),
                      backgroundColor: green,
                    ),
                    child: const Text(
                      "Book Appointment",
                      style: TextStyle(color: white, fontSize: 18),
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:mabook/src/view/const/colors.dart';

Row profileSection(profilePath, Map<String, dynamic> doctorData) {
  return Row(
    children: [
      profilePath.isNotEmpty
          ? CircleAvatar(
              backgroundColor: grey,
              backgroundImage: NetworkImage(profilePath),
              radius: 50,
            )
          : const CircleAvatar(
              backgroundColor: bodygrey,
              radius: 50,
              child: Icon(
                Icons.person,
                color: grey,
              ),
            ),
      const SizedBox(width: 26),
      Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'DR. ${doctorData['name'] ?? 'No Name'}',
            style: GoogleFonts.poppins(
              fontSize: 23,
              fontWeight: FontWeight.w600,
              color: black,
            ),
          ),
          Text(
            '${doctorData['department'] ?? 'No department'}',
            style: GoogleFonts.poppins(
              fontSize: 17,
              color: grey,
            ),
          ),
        ],
      ),
    ],
  );
}

//=====================================================================================

Column detailsDisplay(Map<String, dynamic> doctorData) {
  return Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      Text(
        'Education',
        style: GoogleFonts.poppins(
          fontSize: 17,
          fontWeight: FontWeight.w500,
          color: black,
        ),
      ),
      const SizedBox(height: 8),
      Text(
        '${doctorData.containsKey("education") ? doctorData["education"] : "N/A"}',
        style: GoogleFonts.poppins(
          fontSize: 15,
          color: grey,
        ),
      ),
      const SizedBox(height: 16),
      Row(
        children: [
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'experience',
                style: GoogleFonts.poppins(
                  fontSize: 17,
                  fontWeight: FontWeight.w500,
                  color: black,
                ),
              ),
              const SizedBox(height: 8),
              Text(
                "${doctorData.containsKey("experience") ? doctorData["experience"].toString() : "N/A"} years",
                style: GoogleFonts.poppins(
                  fontSize: 15,
                  color: grey,
                ),
              ),
            ],
          ),
          const Spacer(),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'specialize in',
                style: GoogleFonts.poppins(
                  fontSize: 17,
                  fontWeight: FontWeight.w500,
                  color: black,
                ),
              ),
              const SizedBox(height: 8),
              Text(
                doctorData.containsKey("specializein")
                    ? doctorData["specializein"].toString()
                    : "N/A",
                style: GoogleFonts.poppins(
                  fontSize: 15,
                  color: grey,
                ),
              ),
            ],
          ),
          const SizedBox(
            width: 70,
          )
        ],
      ),
      const SizedBox(height: 16),
      Text(
        'Professional Bio',
        style: GoogleFonts.poppins(
          fontSize: 17,
          fontWeight: FontWeight.w500,
          color: black,
        ),
      ),
      const SizedBox(height: 8),
      Text(
        '${doctorData.containsKey("bio") ? doctorData["bio"] : "N/A"}',
        style: GoogleFonts.poppins(
          fontSize: 15,
          color: grey,
        ),
      ),
    ],
  );
}

//===================================================================================

// Center bookappointment(Map<String, dynamic> doctorData) {
//   return Center(
//     child: SizedBox(
//       width: 365,
//       height: 55,
//       child: ElevatedButton(
//         onPressed: () {
//           Get.to(() => AppointmentScreen(doctorData: doctorData));
//         },
//         style: ElevatedButton.styleFrom(
//           shape:
//               RoundedRectangleBorder(borderRadius: BorderRadius.circular(19)),
//           backgroundColor: green,
//         ),
//         child: const Text(
//           "Book Appointment",
//           style: TextStyle(color: white, fontSize: 18),
//         ),
//       ),
//     ),
//   );
// }
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:mabook/firebase.dart';
import 'package:mabook/src/controller/user_informatin_contrller.dart';
import 'package:mabook/src/user_data.dart';

class AppoinmentController extends GetxController {
  Rx<TextEditingController> diseaseController = TextEditingController().obs;
  final appointmentFormKey = GlobalKey<FormState>();
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  String userId = auth.currentUser!.uid;
  bool isCanceled = false;
  bool isCompleated = false;

  final UserDetailsController ctrl = Get.put(UserDetailsController());
  Future<void> addappoinmentToFirebase(doctorname, amount, selectedDate,
      selectedTokens, doctorid, doctorData, context) async {
    await ctrl.fetchUserData();

    if (appointmentFormKey.currentState!.validate()) {
      try {
        print('================Eeeeeee:');

        DocumentReference newDocRef =
            await _firestore.collection('appoinmentsCollection').add({
          'disease': diseaseController.value.text,
          'doctor': doctorname,
          'date': selectedDate.toString(),
          'token': selectedTokens.toString(),
          'paid': amount.toString(),
          'doctorid': doctorid,
          'userid': userId,
          'doctorData': doctorData,
          'userData': userdatas,
          'prescription ': null,
          'Examinations': null,
          'Advance ': null,
          'iscanceled': isCanceled = false,
          'isCompleated': isCompleated = false,
        });
        String appointmentId = newDocRef.id;
        await _firestore
            .collection('appoinmentsCollection')
            .doc(appointmentId)
            .update({
          'appointmentId': appointmentId,
        });
        Navigator.pop(context);
        Navigator.pop(context);
      } catch (e) {
        print('================Error booking appoinmet : $e');
      }
    }
  }

  String bookedTokenNumbers = '';
  fetchAppointmentDetails(selectedDate, String doctorid) async {
    print(doctorid);

    try {
      QuerySnapshot querySnapshot = await FirebaseFirestore.instance
          .collection('appoinmentsCollection')
          .where('date', isEqualTo: selectedDate.toString())
          .where('doctorid', isEqualTo: doctorid)
          .get();
      if (querySnapshot.docs.isNotEmpty) {
        DocumentSnapshot userDoc = querySnapshot.docs.first;
        Map<String, dynamic> data = userDoc.data() as Map<String, dynamic>;
        bookedTokenNumbers = data['token'];
        print(bookedTokenNumbers);
      } else {
        print("Error No user found with the provided ID.");
      }
    } catch (e) {
      print('Error${e.toString()}');
    }
  }

  Future<void> updateappoinmentToFirebase(
      userdatas, appointmentData, doctorData, context) async {
    try {
      await _firestore
          .collection('appoinmentsCollection')
          .doc(appointmentData['appointmentId'])
          .update({
        'disease': appointmentData['disease'],
        'date': appointmentData['date'],
        'token': appointmentData['token'],
        'paid': appointmentData['paid'],
        'doctorid': appointmentData['doctorid'],
        'userid': userdatas['id'],
        'doctorData': doctorData,
        'userData': userdatas,
        'prescription ': appointmentData['prescription '],
        'Examinations': appointmentData['Examinations'],
        'Advance ': appointmentData['Advance '],
        'iscanceled': true,
        'isCompleated': appointmentData['isCompleated'],
      });
      Navigator.pop(context);
    } catch (e) {
      print('================Error ubdate appoinmet : $e');
    }
  }
}

as you  know this is my doctore informatioin page , in this page i also selecte the time and token in here ,so actully now i need to chage the token selecting motherd ,becouse now it is like user can selecte eny token that available, i need to change that like , if eny user enter to that page , user can only see the next available token , like exaple for ,imagin that , if a user enter to that page user can see the first token no , and if the user book the appointment in that token number it want to save in the firbase and , if next user visit thjat page he can the incriment of that token , like if first user book 1 token number , the next user can see 2 token number (token++), so plase give the code 